<?php
/**
 * Friends Of Presta Published Vulnerability Scan
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file docs/licenses/LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/afl-3.0.php
 *
 * @author    Experto PrestaShop <https://www.youtube.com/@ExpertoPrestaShop>
 * @copyright since 2009 Experto PrestaShop
 * @license   https://opensource.org/licenses/AFL-3.0  Academic Free License ("AFL") v. 3.0
 */

if (!defined('_PS_VERSION_')) {
    exit;
}

class FopPvsTools
{
    public static function processModulesCheckList($xml_security_list)
    {
        $modules_check_list = [];

        foreach ($xml_security_list as $entry) {
            if (in_array((string) $entry->category['term'], ['module', 'modules'])) {
                $content = (string) $entry->content;
                $matches = [];
                if (!preg_match('/<li><strong>Product<\/strong>:\s*([a-zA-Z0-9_-]+)[^a-zA-Z0-9_-]*<\/li>/U', $content, $matches)
                    || !isset($matches[1])
                ) {
                    continue;
                }
                $product = strtolower($matches[1]);

                if (preg_match('/<li><strong>Impacted release<\/strong>: (&lt;=|&gt;=|&lt;|&gt;) ?(\d+\.\d+\.\d++) (&amp;|and) (&lt;=|&gt;=|&lt;|&gt;) ?(\d+\.\d+\.\d++).*<\/li>/U', $content, $matches)) {
                    if (count($matches) < 6) {
                        continue;
                    } else {
                        $min_operator = htmlspecialchars_decode($matches[1]);
                        $min_version = $matches[2];
                        $max_operator = htmlspecialchars_decode($matches[4]);
                        $max_version = $matches[5];
                    }
                } elseif (preg_match('/<li><strong>Impacted release<\/strong>: (&lt;=|&gt;=|&lt;|&gt;) ?(\d+\.\d+\.\d++).*<\/li>/U', $content, $matches)) {
                    if (count($matches) < 3) {
                        continue;
                    } else {
                        $min_operator = htmlspecialchars_decode($matches[1]);
                        $min_version = $matches[2];
                        $max_operator = false;
                        $max_version = false;
                    }
                } else {
                    $min_operator = false;
                    $min_version = false;
                    $max_operator = false;
                    $max_version = false;
                }

                $modules_check_list[] = [
                    'module' => $product,
                    'min_version' => [
                        'number' => $min_version, 'operator' => $min_operator,
                    ],
                    'max_version' => [
                        'number' => $max_version, 'operator' => $max_operator,
                    ],
                    'summary' => (string) $entry->summary,
                    'url' => (string) $entry->id,
                ];
            }
        }

        return $modules_check_list;
    }

    public static function getModulesIssueList($json_modules_check_list)
    {
        $modules_issues = [];

        $modules_on_disk_list = Module::getModulesOnDisk();
        $modules_list = [];
        foreach ($modules_on_disk_list as $mod) {
            if (is_dir(_PS_MODULE_DIR_ . $mod->name)) {
                $modules_list[$mod->name] = $mod;
            }
        }

        foreach ($json_modules_check_list as $module_check) {
            if (isset($modules_list[$module_check->module])) {
                if ((!$module_check->min_version->number || Tools::version_compare($modules_list[$module_check->module]->version, $module_check->min_version->number, $module_check->min_version->operator))
                    && (!$module_check->max_version->number || Tools::version_compare($modules_list[$module_check->module]->version, $module_check->max_version->number, $module_check->max_version->operator))
                ) {
                    $module_check->version = $modules_list[$module_check->module]->version;
                    $module_check->installed = (bool) $modules_list[$module_check->module]->installed;
                    $module_check->active = (bool) $modules_list[$module_check->module]->active;

                    $modules_issues[] = $module_check;
                }
            }
        }

        return $modules_issues;
    }
}
